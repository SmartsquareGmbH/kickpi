apply plugin: "com.github.ben-manes.versions"
apply plugin: "org.jlleitschuh.gradle.ktlint"
apply plugin: "io.gitlab.arturbosch.detekt"
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "de.smartsquare.kickpi"
        minSdkVersion 27
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            buildConfigField "String", "KICKWAY_URL", "\"${getFromSecrets("KICKWAY_URL")}\""
            buildConfigField "String", "LEFT_GOAL_GPIO", "\"${getFromSecrets("LEFT_GOAL_GPIO")}\""
            buildConfigField "String", "RIGHT_GOAL_GPIO", "\"${getFromSecrets("RIGHT_GOAL_GPIO")}\""

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            buildConfigField "String", "KICKWAY_URL", "\"${getFromSecrets("KICKWAY_URL")}\""
            buildConfigField "String", "LEFT_GOAL_GPIO", "\"${getFromSecrets("LEFT_GOAL_GPIO")}\""
            buildConfigField "String", "RIGHT_GOAL_GPIO", "\"${getFromSecrets("RIGHT_GOAL_GPIO")}\""
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }
}

dependencies {
    implementation project(":gameserver")
    implementation 'com.android.support:support-v4:28.0.0-rc01'
    compileOnly 'com.google.android.things:androidthings:1.0'
    implementation "com.android.support:appcompat-v7:28.0.0-rc01"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'com.google.android.gms:play-services-nearby:15.0.1'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'

    implementation "com.github.kirich1409:StrictModeCompat:0b97c52b72"
    implementation 'org.koin:koin-android:1.0.0-RC-3'
    implementation 'org.koin:koin-android-viewmodel:1.0.0-RC-3'
    compile 'org.koin:koin-android-scope:1.0.0-RC-3'
    implementation "android.arch.lifecycle:extensions:1.1.1"

    implementation 'com.github.SmartsquareGmbh:kickprotocol:5332e8f84b'
    implementation "com.uber.autodispose:autodispose-ktx:1.0.0-RC2"
    implementation "com.uber.autodispose:autodispose-android-ktx:1.0.0-RC2"
    compile 'com.android.support:design:28.0.0-rc01'
    implementation "com.mikepenz:community-material-typeface:2.0.46.1@aar"
    compile 'com.github.rubengees:kotterknife:1.1'

    implementation "com.mikepenz:iconics-core:3.0.4@aar"
    implementation "com.mikepenz:iconics-views:3.0.4@aar"
    implementation "com.uber.autodispose:autodispose-android-archcomponents-ktx:1.0.0-RC2"
    implementation 'com.squareup.retrofit2:converter-gson:2.1.0'
    implementation "com.squareup.moshi:moshi:1.6.0"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:1.6.0"

    implementation 'nl.dionsegijn:konfetti:1.1.0'

    testImplementation "io.mockk:mockk:1.8.6"
    testImplementation "org.amshove.kluent:kluent-android:1.41"
    testCompileOnly 'com.google.android.things:androidthings:1.0'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
}

detekt {
    version = detektVersion

    profile("main") {
        input = "$projectDir/src/main/kotlin"
        config = "$projectDir/config/detekt/detekt.yml"
        output = "$buildDir/reports/detekt"
    }
}

ktlint {
    version = ktlintVersion
    reporters = ["CHECKSTYLE"]
}

gradle.projectsEvaluated {
    check.dependsOn detektCheck
}

static String getFromSecrets(String key) {
    if (isCI()) {
        return 'dummy'
    }

    Properties result = new Properties()

    try {
        result.load(new FileInputStream(new File("secrets.properties")))
    } catch (Exception ignored) {
        throw new GradleException("Please add a secrets.properties file with a value for $key to perform this action.")
    }

    if (!result.containsKey(key)) {
        throw new GradleException("Please include a value for $key in your secrets.properties " +
                "file to perform this action.")
    }

    return result[key]
}

static boolean isCI() {
    Object isCI = System.getenv('CI')

    return isCI != null && isCI.toBoolean()
}
